#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define SIZE 25

void initializeGrid(int grid[SIZE][SIZE]);
void printGrid(int grid[SIZE][SIZE]);
void updateGrid(int grid[SIZE][SIZE]);
int countNeighbors(int grid[SIZE][SIZE], int x, int y);

int main() {
    int grid[SIZE][SIZE];
    initializeGrid(grid);

    while (1) {  
        system("clear");
        printGrid(grid);
        updateGrid(grid);
        usleep(200000); 
    }

    return 0;
}

void initializeGrid(int grid[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            grid[i][j] = rand() % 2; 
        }
    }
}

void printGrid(int grid[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf(grid[i][j] ? "* " : ". ");
        }
        printf("\n");
    }
}

void updateGrid(int grid[SIZE][SIZE]) {
    int newGrid[SIZE][SIZE] = {0};  

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            int neighbors = countNeighbors(grid, i, j);

            if (grid[i][j] == 1) {  
                if (neighbors < 2 || neighbors > 3) {
                    newGrid[i][j] = 0; 
                } else {
                    newGrid[i][j] = 1;
                }
            } else {  
                if (neighbors == 3) {
                    newGrid[i][j] = 1;
                }
            }
        }
    }

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            grid[i][j] = newGrid[i][j];
        }
    }
}

int countNeighbors(int grid[SIZE][SIZE], int x, int y) {
    int count = 0;

    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            if (dx == 0 && dy == 0) continue;
            int nx = x + dx;
            int ny = y + dy;
            if (nx >= 0 && nx < SIZE && ny >= 0 && ny < SIZE) {
                count += grid[nx][ny];
            }
        }
    }

    return count;
}
    
